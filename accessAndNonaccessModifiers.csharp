4.2 What is the difference between access and non-access modifiers? Write the protected example too.

Answer: 
-----------------|
Access Modifiers:|
-----------------|

Access modifiers determine the visibility or scope of a class, method, or variable to other parts of the program.
Common access modifiers in Java are:
public: Accessible from any other class.
protected: Accessible within the same package and by subclasses (even if in different packages).
private: Accessible only within the class it is declared in.
default (no modifier): Accessible within the same package only (also known as package-private).

---------------------|
Non-Access Modifiers:|
---------------------|

Non-access modifiers define additional properties of classes, methods, and variables, such as behavior or status. They do not affect visibility.
Some common non-access modifiers are:
static: Makes the variable or method belong to the class, rather than instances of the class.
final: Prevents modification; used with classes to prevent inheritance, with methods to prevent overriding, and with variables to make them constants.
abstract: Declares a method without implementation or a class that cannot be instantiated.
synchronized: Used in multithreading to ensure only one thread accesses a block of code at a time.
transient: Used in serialization to skip the variable.
volatile: Ensures that changes to a variable are visible to all threads immediately.
Example of protected Access Modifier:

------------------|
protected Example:|
------------------|

using System;

class Animal
{
    protected string name; // Use lowercase 'string' for C#

    public void Display() // Changed to public to allow access from Main
    {
        Console.WriteLine("Animal name is: " + name);
    }
}

class Dog : Animal
{
    public void SetName(string dogName) // Method names in C# use PascalCase
    {
        name = dogName; // `name` is accessible in subclass because itâ€™s protected
    }
}

class Program
{
    static void Main(string[] args)
    {
        Dog dog = new Dog();
        dog.SetName("Buddy");
        dog.Display(); // Output: Animal name is: Buddy
    }
}
